{
  "resolvedId": "C:/Users/ruman/Downloads/themeforest-jE7N9u7U-tronis-transport-logistics-vue-nuxt-template/tronis/file/node_modules/d3-org-chart/src/d3-org-chart.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { selection, select } from \"d3-selection\";\nimport { max, min, sum, cumsum } from \"d3-array\";\nimport { tree, stratify } from \"d3-hierarchy\";\nimport { zoom, zoomIdentity } from \"d3-zoom\";\nimport { flextree } from 'd3-flextree';\nimport { linkHorizontal } from 'd3-shape';\n\nconst d3 = {\n    selection,\n    select,\n    max,\n    min,\n    sum,\n    cumsum,\n    tree,\n    stratify,\n    zoom,\n    zoomIdentity,\n    linkHorizontal,\n    flextree\n}\n\nexport class OrgChart {\n    constructor() {\n\n        // Exposed variables  test test\n        const attrs = {\n\n            /* NOT INTENDED FOR PUBLIC OVERRIDE */\n\n            id: `ID${Math.floor(Math.random() * 1000000)}`, // Id for event handlings\n            firstDraw: true,    // Whether chart is drawn for the first time\n            ctx: document.createElement('canvas').getContext('2d'),\n            initialExpandLevel: 1,\n            nodeDefaultBackground: 'none',\n            lastTransform: { x: 0, y: 0, k: 1 },  // Panning and zooming values\n            allowedNodesCount: {},\n            zoomBehavior: null,\n            generateRoot: null,\n\n            /*  INTENDED FOR PUBLIC OVERRIDE */\n\n            svgWidth: 800,   // Configure svg width\n            svgHeight: window.innerHeight - 100,  // Configure svg height\n            container: \"body\",  // Set parent container, either CSS style selector or DOM element\n            data: null, // Set data, it must be an array of objects, where hierarchy is clearly defined via id and parent ID (property names are configurable)\n            connections: [], // Sets connection data, array of objects, SAMPLE:  [{from:\"145\",to:\"201\",label:\"Conflicts of interest\"}]\n            defaultFont: \"Helvetica\", // Set default font\n            nodeId: d => d.nodeId || d.id, // Configure accessor for node id, default is either odeId or id\n            parentNodeId: d => d.parentNodeId || d.parentId, // Configure accessor for parent node id, default is either parentNodeId or parentId\n            rootMargin: 40, // Configure how much root node is offset from top\n            nodeWidth: d3Node => 250, // Configure each node width, use with caution, it is better to have the same value set for all nodes\n            nodeHeight: d => 150,  //  Configure each node height, use with caution, it is better to have the same value set for all nodes\n            neighbourMargin: (n1, n2) => 80, // Configure margin between two nodes, use with caution, it is better to have the same value set for all nodes\n            siblingsMargin: d3Node => 20, // Configure margin between two siblings, use with caution, it is better to have the same value set for all nodes\n            childrenMargin: d => 60, // Configure margin between parent and children, use with caution, it is better to have the same value set for all nodes\n            compactMarginPair: d => 100, // Configure margin between two nodes in compact mode, use with caution, it is better to have the same value set for all nodes\n            compactMarginBetween: (d3Node => 20), // Configure margin between two nodes in compact mode, use with caution, it is better to have the same value set for all nodes\n            nodeButtonWidth: d => 40, // Configure expand & collapse button width\n            nodeButtonHeight: d => 40, // Configure expand & collapse button height\n            nodeButtonX: d => -20, // Configure expand & collapse button x position\n            nodeButtonY: d => -20,  // Configure expand & collapse button y position\n            linkYOffset: 30, // When correcting links which is not working for safari\n            pagingStep: d => 5, // Configure how many nodes to show when making new nodes appear\n            minPagingVisibleNodes: d => 2000, // Configure minimum number of visible nodes , after which paging button appears\n            scaleExtent: [0.001, 20],  // Configure zoom scale extent , if you don't want any kind of zooming, set it to [1,1]\n            duration: 400, // Configure duration of transitions\n            imageName: 'Chart', // Configure exported PNG and SVG image name\n            setActiveNodeCentered: true, // Configure if active node should be centered when expanded and collapsed\n            layout: \"top\",// Configure layout direction , possible values are \"top\", \"left\", \"right\", \"bottom\"\n            compact: true, // Configure if compact mode is enabled , when enabled, nodes are shown in compact positions, instead of horizontal spread\n            createZoom: d => d3.zoom(),\n            onZoomStart: e => { }, // Callback for zoom & panning start\n            onZoom: e => { }, // Callback for zoom & panning \n            onZoomEnd: e => { }, // Callback for zoom & panning end\n            onNodeClick: (d) => d, // Callback for node click\n            onExpandOrCollapse: (d) => d, // Callback for node expand or collapse\n\n            /*\n            * Node HTML content generation , remember that you can access some helper methods:\n\n            * node=> node.data - to access node's original data\n            * node=> node.leaves() - to access node's leaves\n            * node=> node.descendants() - to access node's descendants\n            * node=> node.children - to access node's children\n            * node=> node.parent - to access node's parent\n            * node=> node.depth - to access node's depth\n            * node=> node.hierarchyHeight - to access node's hierarchy height ( Height, which d3 assigns to hierarchy nodes)\n            * node=> node.height - to access node's height\n            * node=> node.width - to access node's width\n            * \n            * You can also access additional properties to style your node:\n            * \n            * d=>d.data._centeredWithDescendants - when node is centered with descendants\n            * d=>d.data._directSubordinatesPaging - subordinates count in paging mode\n            * d=>d.data._directSubordinates - subordinates count\n            * d=>d.data._totalSubordinates - total subordinates count\n            * d=>d._highlighted - when node is highlighted\n            * d=>d._upToTheRootHighlighted - when node is highlighted up to the root\n            * d=>d._expanded - when node is expanded\n            * d=>d.data._centered - when node is centered\n            */\n            nodeContent: d => `<div style=\"padding:5px;font-size:10px;\">Sample Node(id=${d.id}), override using <br/> \n            <code>chart.nodeContent({data}=>{ <br/>\n             &nbsp;&nbsp;&nbsp;&nbsp;return '' // Custom HTML <br/>\n             })</code>\n             <br/> \n             Or check different <a href=\"https://github.com/bumbeishvili/org-chart#jump-to-examples\" target=\"_blank\">layout examples</a>\n             </div>`,\n\n            /* Node expand & collapse button content and styling. You can access same helper methods as above */\n            buttonContent: ({ node, state }) => {\n                const icons = {\n                    \"left\": d => d ?\n                        `<div style=\"display:flex;\"><span style=\"align-items:center;display:flex;\"><svg width=\"8\" height=\"8\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M14.283 3.50094L6.51 11.4749C6.37348 11.615 6.29707 11.8029 6.29707 11.9984C6.29707 12.194 6.37348 12.3819 6.51 12.5219L14.283 20.4989C14.3466 20.5643 14.4226 20.6162 14.5066 20.6516C14.5906 20.6871 14.6808 20.7053 14.772 20.7053C14.8632 20.7053 14.9534 20.6871 15.0374 20.6516C15.1214 20.6162 15.1974 20.5643 15.261 20.4989C15.3918 20.365 15.4651 20.1852 15.4651 19.9979C15.4651 19.8107 15.3918 19.6309 15.261 19.4969L7.9515 11.9984L15.261 4.50144C15.3914 4.36756 15.4643 4.18807 15.4643 4.00119C15.4643 3.81431 15.3914 3.63482 15.261 3.50094C15.1974 3.43563 15.1214 3.38371 15.0374 3.34827C14.9534 3.31282 14.8632 3.29456 14.772 3.29456C14.6808 3.29456 14.5906 3.31282 14.5066 3.34827C14.4226 3.38371 14.3466 3.43563 14.283 3.50094V3.50094Z\" fill=\"#716E7B\" stroke=\"#716E7B\"/>\n                      </svg></span><span style=\"color:#716E7B\">${node.data._directSubordinatesPaging} </span></div>` :\n                        `<div style=\"display:flex;\"><span style=\"align-items:center;display:flex;\"><svg width=\"8\" height=\"8\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <path d=\"M7.989 3.49944C7.85817 3.63339 7.78492 3.8132 7.78492 4.00044C7.78492 4.18768 7.85817 4.36749 7.989 4.50144L15.2985 11.9999L7.989 19.4969C7.85817 19.6309 7.78492 19.8107 7.78492 19.9979C7.78492 20.1852 7.85817 20.365 7.989 20.4989C8.05259 20.5643 8.12863 20.6162 8.21261 20.6516C8.2966 20.6871 8.38684 20.7053 8.478 20.7053C8.56916 20.7053 8.6594 20.6871 8.74338 20.6516C8.82737 20.6162 8.90341 20.5643 8.967 20.4989L16.74 12.5234C16.8765 12.3834 16.9529 12.1955 16.9529 11.9999C16.9529 11.8044 16.8765 11.6165 16.74 11.4764L8.967 3.50094C8.90341 3.43563 8.82737 3.38371 8.74338 3.34827C8.6594 3.31282 8.56916 3.29456 8.478 3.29456C8.38684 3.29456 8.2966 3.31282 8.21261 3.34827C8.12863 3.38371 8.05259 3.43563 7.989 3.50094V3.49944Z\" fill=\"#716E7B\" stroke=\"#716E7B\"/>\n                          </svg></span><span style=\"color:#716E7B\">${node.data._directSubordinatesPaging} </span></div>`\n                    ,\n                    \"bottom\": d => d ? `<div style=\"display:flex;\"><span style=\"align-items:center;display:flex;\"><svg width=\"8\" height=\"8\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                       <path d=\"M19.497 7.98903L12 15.297L4.503 7.98903C4.36905 7.85819 4.18924 7.78495 4.002 7.78495C3.81476 7.78495 3.63495 7.85819 3.501 7.98903C3.43614 8.05257 3.38462 8.12842 3.34944 8.21213C3.31427 8.29584 3.29615 8.38573 3.29615 8.47653C3.29615 8.56733 3.31427 8.65721 3.34944 8.74092C3.38462 8.82463 3.43614 8.90048 3.501 8.96403L11.4765 16.74C11.6166 16.8765 11.8044 16.953 12 16.953C12.1956 16.953 12.3834 16.8765 12.5235 16.74L20.499 8.96553C20.5643 8.90193 20.6162 8.8259 20.6517 8.74191C20.6871 8.65792 20.7054 8.56769 20.7054 8.47653C20.7054 8.38537 20.6871 8.29513 20.6517 8.21114C20.6162 8.12715 20.5643 8.05112 20.499 7.98753C20.3651 7.85669 20.1852 7.78345 19.998 7.78345C19.8108 7.78345 19.6309 7.85669 19.497 7.98753V7.98903Z\" fill=\"#716E7B\" stroke=\"#716E7B\"/>\n                       </svg></span><span style=\"margin-left:1px;color:#716E7B\" >${node.data._directSubordinatesPaging} </span></div>\n                       ` : `<div style=\"display:flex;\"><span style=\"align-items:center;display:flex;\"><svg width=\"8\" height=\"8\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                       <path d=\"M11.457 8.07005L3.49199 16.4296C3.35903 16.569 3.28485 16.7543 3.28485 16.9471C3.28485 17.1398 3.35903 17.3251 3.49199 17.4646L3.50099 17.4736C3.56545 17.5414 3.64304 17.5954 3.72904 17.6324C3.81504 17.6693 3.90765 17.6883 4.00124 17.6883C4.09483 17.6883 4.18745 17.6693 4.27344 17.6324C4.35944 17.5954 4.43703 17.5414 4.50149 17.4736L12.0015 9.60155L19.4985 17.4736C19.563 17.5414 19.6405 17.5954 19.7265 17.6324C19.8125 17.6693 19.9052 17.6883 19.9987 17.6883C20.0923 17.6883 20.1849 17.6693 20.2709 17.6324C20.3569 17.5954 20.4345 17.5414 20.499 17.4736L20.508 17.4646C20.641 17.3251 20.7151 17.1398 20.7151 16.9471C20.7151 16.7543 20.641 16.569 20.508 16.4296L12.543 8.07005C12.4729 7.99653 12.3887 7.93801 12.2954 7.89801C12.202 7.85802 12.1015 7.8374 12 7.8374C11.8984 7.8374 11.798 7.85802 11.7046 7.89801C11.6113 7.93801 11.527 7.99653 11.457 8.07005Z\" fill=\"#716E7B\" stroke=\"#716E7B\"/>\n                       </svg></span><span style=\"margin-left:1px;color:#716E7B\" >${node.data._directSubordinatesPaging} </span></div>\n                    `,\n                    \"right\": d => d ? `<div style=\"display:flex;\"><span style=\"align-items:center;display:flex;\"><svg width=\"8\" height=\"8\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                       <path d=\"M7.989 3.49944C7.85817 3.63339 7.78492 3.8132 7.78492 4.00044C7.78492 4.18768 7.85817 4.36749 7.989 4.50144L15.2985 11.9999L7.989 19.4969C7.85817 19.6309 7.78492 19.8107 7.78492 19.9979C7.78492 20.1852 7.85817 20.365 7.989 20.4989C8.05259 20.5643 8.12863 20.6162 8.21261 20.6516C8.2966 20.6871 8.38684 20.7053 8.478 20.7053C8.56916 20.7053 8.6594 20.6871 8.74338 20.6516C8.82737 20.6162 8.90341 20.5643 8.967 20.4989L16.74 12.5234C16.8765 12.3834 16.9529 12.1955 16.9529 11.9999C16.9529 11.8044 16.8765 11.6165 16.74 11.4764L8.967 3.50094C8.90341 3.43563 8.82737 3.38371 8.74338 3.34827C8.6594 3.31282 8.56916 3.29456 8.478 3.29456C8.38684 3.29456 8.2966 3.31282 8.21261 3.34827C8.12863 3.38371 8.05259 3.43563 7.989 3.50094V3.49944Z\" fill=\"#716E7B\" stroke=\"#716E7B\"/>\n                       </svg></span><span style=\"color:#716E7B\">${node.data._directSubordinatesPaging} </span></div>` :\n                        `<div style=\"display:flex;\"><span style=\"align-items:center;display:flex;\"><svg width=\"8\" height=\"8\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                       <path d=\"M14.283 3.50094L6.51 11.4749C6.37348 11.615 6.29707 11.8029 6.29707 11.9984C6.29707 12.194 6.37348 12.3819 6.51 12.5219L14.283 20.4989C14.3466 20.5643 14.4226 20.6162 14.5066 20.6516C14.5906 20.6871 14.6808 20.7053 14.772 20.7053C14.8632 20.7053 14.9534 20.6871 15.0374 20.6516C15.1214 20.6162 15.1974 20.5643 15.261 20.4989C15.3918 20.365 15.4651 20.1852 15.4651 19.9979C15.4651 19.8107 15.3918 19.6309 15.261 19.4969L7.9515 11.9984L15.261 4.50144C15.3914 4.36756 15.4643 4.18807 15.4643 4.00119C15.4643 3.81431 15.3914 3.63482 15.261 3.50094C15.1974 3.43563 15.1214 3.38371 15.0374 3.34827C14.9534 3.31282 14.8632 3.29456 14.772 3.29456C14.6808 3.29456 14.5906 3.31282 14.5066 3.34827C14.4226 3.38371 14.3466 3.43563 14.283 3.50094V3.50094Z\" fill=\"#716E7B\" stroke=\"#716E7B\"/>\n                       </svg></span><span style=\"color:#716E7B\">${node.data._directSubordinatesPaging} </span></div>`,\n                    \"top\": d => d ? `<div style=\"display:flex;\"><span style=\"align-items:center;display:flex;\"><svg width=\"8\" height=\"8\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M11.457 8.07005L3.49199 16.4296C3.35903 16.569 3.28485 16.7543 3.28485 16.9471C3.28485 17.1398 3.35903 17.3251 3.49199 17.4646L3.50099 17.4736C3.56545 17.5414 3.64304 17.5954 3.72904 17.6324C3.81504 17.6693 3.90765 17.6883 4.00124 17.6883C4.09483 17.6883 4.18745 17.6693 4.27344 17.6324C4.35944 17.5954 4.43703 17.5414 4.50149 17.4736L12.0015 9.60155L19.4985 17.4736C19.563 17.5414 19.6405 17.5954 19.7265 17.6324C19.8125 17.6693 19.9052 17.6883 19.9987 17.6883C20.0923 17.6883 20.1849 17.6693 20.2709 17.6324C20.3569 17.5954 20.4345 17.5414 20.499 17.4736L20.508 17.4646C20.641 17.3251 20.7151 17.1398 20.7151 16.9471C20.7151 16.7543 20.641 16.569 20.508 16.4296L12.543 8.07005C12.4729 7.99653 12.3887 7.93801 12.2954 7.89801C12.202 7.85802 12.1015 7.8374 12 7.8374C11.8984 7.8374 11.798 7.85802 11.7046 7.89801C11.6113 7.93801 11.527 7.99653 11.457 8.07005Z\" fill=\"#716E7B\" stroke=\"#716E7B\"/>\n                        </svg></span><span style=\"margin-left:1px;color:#716E7B\">${node.data._directSubordinatesPaging} </span></div>\n                        ` : `<div style=\"display:flex;\"><span style=\"align-items:center;display:flex;\"><svg width=\"8\" height=\"8\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M19.497 7.98903L12 15.297L4.503 7.98903C4.36905 7.85819 4.18924 7.78495 4.002 7.78495C3.81476 7.78495 3.63495 7.85819 3.501 7.98903C3.43614 8.05257 3.38462 8.12842 3.34944 8.21213C3.31427 8.29584 3.29615 8.38573 3.29615 8.47653C3.29615 8.56733 3.31427 8.65721 3.34944 8.74092C3.38462 8.82463 3.43614 8.90048 3.501 8.96403L11.4765 16.74C11.6166 16.8765 11.8044 16.953 12 16.953C12.1956 16.953 12.3834 16.8765 12.5235 16.74L20.499 8.96553C20.5643 8.90193 20.6162 8.8259 20.6517 8.74191C20.6871 8.65792 20.7054 8.56769 20.7054 8.47653C20.7054 8.38537 20.6871 8.29513 20.6517 8.21114C20.6162 8.12715 20.5643 8.05112 20.499 7.98753C20.3651 7.85669 20.1852 7.78345 19.998 7.78345C19.8108 7.78345 19.6309 7.85669 19.497 7.98753V7.98903Z\" fill=\"#716E7B\" stroke=\"#716E7B\"/>\n                        </svg></span><span style=\"margin-left:1px;color:#716E7B\">${node.data._directSubordinatesPaging} </span></div>\n                    `,\n                }\n                return `<div style=\"border:1px solid #E4E2E9;border-radius:3px;padding:3px;font-size:9px;margin:auto auto;background-color:white\"> ${icons[state.layout](node.children)}  </div>`\n            },\n            /* Node paging button content and styling. You can access same helper methods as above. */\n            pagingButton: (d, i, arr, state) => {\n                const step = state.pagingStep(d.parent);\n                const currentIndex = d.parent.data._pagingStep;\n                const diff = d.parent.data._directSubordinatesPaging - currentIndex;\n                const min = Math.min(diff, step);\n                return `\n                   <div style=\"margin-top:90px;\">\n                      <div style=\"display:flex;width:170px;border-radius:20px;padding:5px 15px; padding-bottom:4px;;background-color:#E5E9F2\">\n                      <div><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M5.59 7.41L10.18 12L5.59 16.59L7 18L13 12L7 6L5.59 7.41ZM16 6H18V18H16V6Z\" fill=\"#716E7B\" stroke=\"#716E7B\"/>\n                      </svg>\n                      </div><div style=\"line-height:2\"> Show next ${min}  nodes </div></div>\n                   </div>\n                `\n            },\n            /* You can access and modify actual node DOM element in runtime using this method. */\n            nodeUpdate: function (d, i, arr) {\n                d3.select(this)\n                    .select('.node-rect')\n                    .attr(\"stroke\", d => d.data._highlighted || d.data._upToTheRootHighlighted ? '#E27396' : 'none')\n                    .attr(\"stroke-width\", d.data._highlighted || d.data._upToTheRootHighlighted ? 10 : 1)\n            },\n            nodeEnter: (d) => d, // Custom handling of node update\n            nodeExit: (d) => d, // Custom handling of exit node\n            /* You can access and modify actual link DOM element in runtime using this method. */\n            linkUpdate: function (d, i, arr) {\n                d3.select(this)\n                    .attr(\"stroke\", d => d.data._upToTheRootHighlighted ? '#E27396' : '#E4E2E9')\n                    .attr(\"stroke-width\", d => d.data._upToTheRootHighlighted ? 5 : 1)\n\n                if (d.data._upToTheRootHighlighted) {\n                    d3.select(this).raise()\n                }\n            },\n            /* Horizontal diagonal generation algorithm - https://observablehq.com/@bumbeishvili/curved-edges-compact-horizontal */\n            hdiagonal: function (s, t, m) {\n                // Define source and target x,y coordinates\n                const x = s.x;\n                const y = s.y;\n                const ex = t.x;\n                const ey = t.y;\n\n                let mx = m && m.x != null ? m.x : x;  // This is a changed line\n                let my = m && m.y != null ? m.y : y; // This also is a changed line\n\n                // Values in case of top reversed and left reversed diagonals\n                let xrvs = ex - x < 0 ? -1 : 1;\n                let yrvs = ey - y < 0 ? -1 : 1;\n\n                // Define preferred curve radius\n                let rdef = 35;\n\n                // Reduce curve radius, if source-target x space is smaller\n                let r = Math.abs(ex - x) / 2 < rdef ? Math.abs(ex - x) / 2 : rdef;\n\n                // Further reduce curve radius, is y space is more small\n                r = Math.abs(ey - y) / 2 < r ? Math.abs(ey - y) / 2 : r;\n\n                // Defin width and height of link, excluding radius\n                let h = Math.abs(ey - y) / 2 - r;\n                let w = Math.abs(ex - x) / 2 - r;\n\n                // Build and return custom arc command\n                return `\n                          M ${mx} ${my}\n                          L ${mx} ${y}\n                          L ${x} ${y}\n                          L ${x + w * xrvs} ${y}\n                          C ${x + w * xrvs + r * xrvs} ${y} \n                            ${x + w * xrvs + r * xrvs} ${y} \n                            ${x + w * xrvs + r * xrvs} ${y + r * yrvs}\n                          L ${x + w * xrvs + r * xrvs} ${ey - r * yrvs} \n                          C ${x + w * xrvs + r * xrvs}  ${ey} \n                            ${x + w * xrvs + r * xrvs}  ${ey} \n                            ${ex - w * xrvs}  ${ey}\n                          L ${ex} ${ey}\n               `;\n            },\n            /* Vertical diagonal generation algorithm - https://observablehq.com/@bumbeishvili/curved-edges-compacty-vertical */\n            diagonal: function (s, t, m, offsets = { sy: 0, }) {\n                const x = s.x;\n                let y = s.y;\n\n                const ex = t.x;\n                const ey = t.y;\n\n                let mx = m && m.x != null ? m.x : x;  // This is a changed line\n                let my = m && m.y != null ? m.y : y; // This also is a changed line\n\n                let xrvs = ex - x < 0 ? -1 : 1;\n                let yrvs = ey - y < 0 ? -1 : 1;\n\n                y += offsets.sy;\n\n\n                let rdef = 35;\n                let r = Math.abs(ex - x) / 2 < rdef ? Math.abs(ex - x) / 2 : rdef;\n\n                r = Math.abs(ey - y) / 2 < r ? Math.abs(ey - y) / 2 : r;\n\n                let h = Math.abs(ey - y) / 2 - r;\n                let w = Math.abs(ex - x) - r * 2;\n                //w=0;\n                const path = `\n                          M ${mx} ${my}\n                          L ${x} ${my}\n                          L ${x} ${y}\n                          L ${x} ${y + h * yrvs}\n                          C  ${x} ${y + h * yrvs + r * yrvs} ${x} ${y + h * yrvs + r * yrvs\n                    } ${x + r * xrvs} ${y + h * yrvs + r * yrvs}\n                          L ${x + w * xrvs + r * xrvs} ${y + h * yrvs + r * yrvs}\n                          C  ${ex}  ${y + h * yrvs + r * yrvs} ${ex}  ${y + h * yrvs + r * yrvs\n                    } ${ex} ${ey - h * yrvs}\n                          L ${ex} ${ey}\n               `;\n                return path;\n            },\n            // Defining arrows with markers for connections\n            defs: function (state, visibleConnections) {\n                return `<defs>\n                    ${visibleConnections.map(conn => {\n                    const labelWidth = this.getTextWidth(conn.label, { ctx: state.ctx, fontSize: 2, defaultFont: state.defaultFont });\n                    return `\n                       <marker id=\"${conn.from + \"_\" + conn.to}\" refX=\"${conn._source.x < conn._target.x ? -7 : 7}\" refY=\"5\" markerWidth=\"500\"  markerHeight=\"500\"  orient=\"${conn._source.x < conn._target.x ? \"auto\" : \"auto-start-reverse\"}\" >\n                       <rect rx=0.5 width=${conn.label ? labelWidth + 3 : 0} height=3 y=1  fill=\"#E27396\"></rect>\n                       <text font-size=\"2px\" x=1 fill=\"white\" y=3>${conn.label || ''}</text>\n                       </marker>\n\n                       <marker id=\"arrow-${conn.from + \"_\" + conn.to}\"  markerWidth=\"500\"  markerHeight=\"500\"  refY=\"2\"  refX=\"1\" orient=\"${conn._source.x < conn._target.x ? \"auto\" : \"auto-start-reverse\"}\" >\n                       <path transform=\"translate(0)\" d='M0,0 V4 L2,2 Z' fill='#E27396' />\n                       </marker>\n                    `}).join(\"\")}\n                    </defs>\n                    `},\n            /* You can update connections with custom styling using this function */\n            connectionsUpdate: function (d, i, arr) {\n                d3.select(this)\n                    .attr(\"stroke\", d => '#E27396')\n                    .attr('stroke-linecap', 'round')\n                    .attr(\"stroke-width\", d => '5')\n                    .attr('pointer-events', 'none')\n                    .attr(\"marker-start\", d => `url(#${d.from + \"_\" + d.to})`)\n                    .attr(\"marker-end\", d => `url(#arrow-${d.from + \"_\" + d.to})`)\n            },\n            // Link generator for connections\n            linkGroupArc: d3.linkHorizontal().x(d => d.x).y(d => d.y),\n\n            /*\n            *   You can customize/offset positions for each node and link by overriding these functions\n            *   For example, suppose you want to move link y position 30 px bellow in top layout. You can do it like this:\n            *   ```javascript\n            *   const layout = chart.layoutBindings();\n            *   layout.top.linkY = node => node.y + 30;\n            *   chart.layoutBindings(layout);\n            *   ```\n            */\n            layoutBindings: {\n                \"left\": {\n                    \"nodeLeftX\": node => 0,\n                    \"nodeRightX\": node => node.width,\n                    \"nodeTopY\": node => - node.height / 2,\n                    \"nodeBottomY\": node => node.height / 2,\n                    \"nodeJoinX\": node => node.x + node.width,\n                    \"nodeJoinY\": node => node.y - node.height / 2,\n                    \"linkJoinX\": node => node.x + node.width,\n                    \"linkJoinY\": node => node.y,\n                    \"linkX\": node => node.x,\n                    \"linkY\": node => node.y,\n                    \"linkCompactXStart\": node => node.x + node.width / 2,//node.x + (node.compactEven ? node.width / 2 : -node.width / 2),\n                    \"linkCompactYStart\": node => node.y + (node.compactEven ? node.height / 2 : -node.height / 2),\n                    \"compactLinkMidX\": (node, state) => node.firstCompactNode.x,// node.firstCompactNode.x + node.firstCompactNode.flexCompactDim[0] / 4 + state.compactMarginPair(node) / 4,\n                    \"compactLinkMidY\": (node, state) => node.firstCompactNode.y + node.firstCompactNode.flexCompactDim[0] / 4 + state.compactMarginPair(node) / 4,\n                    \"linkParentX\": node => node.parent.x + node.parent.width,\n                    \"linkParentY\": node => node.parent.y,\n                    \"buttonX\": node => node.width,\n                    \"buttonY\": node => node.height / 2,\n                    \"centerTransform\": ({ root, rootMargin, centerY, scale, centerX }) => `translate(${rootMargin},${centerY}) scale(${scale})`,\n                    \"compactDimension\": {\n                        sizeColumn: node => node.height,\n                        sizeRow: node => node.width,\n                        reverse: arr => arr.slice().reverse()\n                    },\n                    \"nodeFlexSize\": ({ height, width, siblingsMargin, childrenMargin, state, node }) => {\n                        if (state.compact && node.flexCompactDim) {\n                            const result = [node.flexCompactDim[0], node.flexCompactDim[1]]\n                            return result;\n                        };\n                        return [height + siblingsMargin, width + childrenMargin]\n                    },\n                    \"zoomTransform\": ({ centerY, scale }) => `translate(${0},${centerY}) scale(${scale})`,\n                    \"diagonal\": this.hdiagonal.bind(this),\n                    \"swap\": d => { const x = d.x; d.x = d.y; d.y = x; },\n                    \"nodeUpdateTransform\": ({ x, y, width, height }) => `translate(${x},${y - height / 2})`,\n                },\n                \"top\": {\n                    \"nodeLeftX\": node => -node.width / 2,\n                    \"nodeRightX\": node => node.width / 2,\n                    \"nodeTopY\": node => 0,\n                    \"nodeBottomY\": node => node.height,\n                    \"nodeJoinX\": node => node.x - node.width / 2,\n                    \"nodeJoinY\": node => node.y + node.height,\n                    \"linkJoinX\": node => node.x,\n                    \"linkJoinY\": node => node.y + node.height,\n                    \"linkCompactXStart\": node => node.x + (node.compactEven ? node.width / 2 : -node.width / 2),\n                    \"linkCompactYStart\": node => node.y + node.height / 2,\n                    \"compactLinkMidX\": (node, state) => node.firstCompactNode.x + node.firstCompactNode.flexCompactDim[0] / 4 + state.compactMarginPair(node) / 4,\n                    \"compactLinkMidY\": node => node.firstCompactNode.y,\n                    \"compactDimension\": {\n                        sizeColumn: node => node.width,\n                        sizeRow: node => node.height,\n                        reverse: arr => arr,\n                    },\n                    \"linkX\": node => node.x,\n                    \"linkY\": node => node.y,\n                    \"linkParentX\": node => node.parent.x,\n                    \"linkParentY\": node => node.parent.y + node.parent.height,\n                    \"buttonX\": node => node.width / 2,\n                    \"buttonY\": node => node.height,\n                    \"centerTransform\": ({ root, rootMargin, centerY, scale, centerX }) => `translate(${centerX},${rootMargin}) scale(${scale})`,\n                    \"nodeFlexSize\": ({ height, width, siblingsMargin, childrenMargin, state, node, compactViewIndex }) => {\n                        if (state.compact && node.flexCompactDim) {\n                            const result = [node.flexCompactDim[0], node.flexCompactDim[1]]\n                            return result;\n                        };\n                        return [width + siblingsMargin, height + childrenMargin];\n                    },\n                    \"zoomTransform\": ({ centerX, scale }) => `translate(${centerX},0}) scale(${scale})`,\n                    \"diagonal\": this.diagonal.bind(this),\n                    \"swap\": d => { },\n                    \"nodeUpdateTransform\": ({ x, y, width, height }) => `translate(${x - width / 2},${y})`,\n\n                },\n                \"bottom\": {\n                    \"nodeLeftX\": node => -node.width / 2,\n                    \"nodeRightX\": node => node.width / 2,\n                    \"nodeTopY\": node => -node.height,\n                    \"nodeBottomY\": node => 0,\n                    \"nodeJoinX\": node => node.x - node.width / 2,\n                    \"nodeJoinY\": node => node.y - node.height - node.height,\n                    \"linkJoinX\": node => node.x,\n                    \"linkJoinY\": node => node.y - node.height,\n                    \"linkCompactXStart\": node => node.x + (node.compactEven ? node.width / 2 : -node.width / 2),\n                    \"linkCompactYStart\": node => node.y - node.height / 2,\n                    \"compactLinkMidX\": (node, state) => node.firstCompactNode.x + node.firstCompactNode.flexCompactDim[0] / 4 + state.compactMarginPair(node) / 4,\n                    \"compactLinkMidY\": node => node.firstCompactNode.y,\n                    \"linkX\": node => node.x,\n                    \"linkY\": node => node.y,\n                    \"compactDimension\": {\n                        sizeColumn: node => node.width,\n                        sizeRow: node => node.height,\n                        reverse: arr => arr,\n                    },\n                    \"linkParentX\": node => node.parent.x,\n                    \"linkParentY\": node => node.parent.y - node.parent.height,\n                    \"buttonX\": node => node.width / 2,\n                    \"buttonY\": node => 0,\n                    \"centerTransform\": ({ root, rootMargin, centerY, scale, centerX, chartHeight }) => `translate(${centerX},${chartHeight - rootMargin}) scale(${scale})`,\n                    \"nodeFlexSize\": ({ height, width, siblingsMargin, childrenMargin, state, node }) => {\n                        if (state.compact && node.flexCompactDim) {\n                            const result = [node.flexCompactDim[0], node.flexCompactDim[1]]\n                            return result;\n                        };\n                        return [width + siblingsMargin, height + childrenMargin]\n                    },\n                    \"zoomTransform\": ({ centerX, scale }) => `translate(${centerX},0}) scale(${scale})`,\n                    \"diagonal\": this.diagonal.bind(this),\n                    \"swap\": d => { d.y = -d.y; },\n                    \"nodeUpdateTransform\": ({ x, y, width, height }) => `translate(${x - width / 2},${y - height})`,\n                },\n                \"right\": {\n                    \"nodeLeftX\": node => -node.width,\n                    \"nodeRightX\": node => 0,\n                    \"nodeTopY\": node => - node.height / 2,\n                    \"nodeBottomY\": node => node.height / 2,\n                    \"nodeJoinX\": node => node.x - node.width - node.width,\n                    \"nodeJoinY\": node => node.y - node.height / 2,\n                    \"linkJoinX\": node => node.x - node.width,\n                    \"linkJoinY\": node => node.y,\n                    \"linkX\": node => node.x,\n                    \"linkY\": node => node.y,\n                    \"linkParentX\": node => node.parent.x - node.parent.width,\n                    \"linkParentY\": node => node.parent.y,\n                    \"buttonX\": node => 0,\n                    \"buttonY\": node => node.height / 2,\n                    \"linkCompactXStart\": node => node.x - node.width / 2,//node.x + (node.compactEven ? node.width / 2 : -node.width / 2),\n                    \"linkCompactYStart\": node => node.y + (node.compactEven ? node.height / 2 : -node.height / 2),\n                    \"compactLinkMidX\": (node, state) => node.firstCompactNode.x,// node.firstCompactNode.x + node.firstCompactNode.flexCompactDim[0] / 4 + state.compactMarginPair(node) / 4,\n                    \"compactLinkMidY\": (node, state) => node.firstCompactNode.y + node.firstCompactNode.flexCompactDim[0] / 4 + state.compactMarginPair(node) / 4,\n                    \"centerTransform\": ({ root, rootMargin, centerY, scale, centerX, chartWidth }) => `translate(${chartWidth - rootMargin},${centerY}) scale(${scale})`,\n                    \"nodeFlexSize\": ({ height, width, siblingsMargin, childrenMargin, state, node }) => {\n                        if (state.compact && node.flexCompactDim) {\n                            const result = [node.flexCompactDim[0], node.flexCompactDim[1]]\n                            return result;\n                        };\n                        return [height + siblingsMargin, width + childrenMargin]\n                    },\n                    \"compactDimension\": {\n                        sizeColumn: node => node.height,\n                        sizeRow: node => node.width,\n                        reverse: arr => arr.slice().reverse()\n                    },\n                    \"zoomTransform\": ({ centerY, scale }) => `translate(${0},${centerY}) scale(${scale})`,\n                    \"diagonal\": this.hdiagonal.bind(this),\n                    \"swap\": d => { const x = d.x; d.x = -d.y; d.y = x; },\n                    \"nodeUpdateTransform\": ({ x, y, width, height }) => `translate(${x - width},${y - height / 2})`,\n                },\n            }\n\n        };\n\n        this.getChartState = () => attrs;\n\n        // Dynamically set getter and setter functions for Chart class\n        Object.keys(attrs).forEach((key) => {\n            //@ts-ignore\n            this[key] = function (_) {\n                if (!arguments.length) {\n                    return attrs[key];\n                } else {\n                    attrs[key] = _;\n                }\n                return this;\n            };\n        });\n\n        this.initializeEnterExitUpdatePattern();\n    }\n\n    initializeEnterExitUpdatePattern() {\n        d3.selection.prototype.patternify = function (params) {\n            var container = this;\n            var selector = params.selector;\n            var elementTag = params.tag;\n            var data = params.data || [selector];\n\n            // Pattern in action\n            var selection = container.selectAll(\".\" + selector).data(data, (d, i) => {\n                if (typeof d === \"object\") {\n                    if (d.id) { return d.id; }\n                }\n                return i;\n            });\n            selection.exit().remove();\n            selection = selection.enter().append(elementTag).merge(selection);\n            selection.attr(\"class\", selector);\n            return selection;\n        };\n    }\n\n    // This method retrieves passed node's children IDs (including node)\n    getNodeChildren({ data, children, _children }, nodeStore) {\n        // Store current node ID\n        nodeStore.push(data);\n\n        // Loop over children and recursively store descendants id (expanded nodes)\n        if (children) {\n            children.forEach((d) => {\n                this.getNodeChildren(d, nodeStore);\n            });\n        }\n\n        // Loop over _children and recursively store descendants id (collapsed nodes)\n        if (_children) {\n            _children.forEach((d) => {\n                this.getNodeChildren(d, nodeStore);\n            });\n        }\n\n        // Return result\n        return nodeStore;\n    }\n\n    // This method can be invoked via chart.setZoomFactor API, it zooms to particulat scale\n    initialZoom(zoomLevel) {\n        const attrs = this.getChartState();\n        attrs.lastTransform.k = zoomLevel;\n        return this;\n    }\n\n    render() {\n        //InnerFunctions which will update visuals\n        const attrs = this.getChartState();\n        if (!attrs.data || attrs.data.length == 0) {\n            console.log('ORG CHART - Data is empty');\n            if (attrs.container) {\n                select(attrs.container).select('.nodes-wrapper').remove();\n                select(attrs.container).select('.links-wrapper').remove();\n                select(attrs.container).select('.connections-wrapper').remove();\n            }\n            return this;\n        }\n\n        //Drawing containers\n        const container = d3.select(attrs.container);\n        const containerRect = container.node().getBoundingClientRect();\n        if (containerRect.width > 0) attrs.svgWidth = containerRect.width;\n\n        //Calculated properties\n        const calc = {\n            id: `ID${Math.floor(Math.random() * 1000000)}`, // id for event handlings,\n            chartWidth: attrs.svgWidth,\n            chartHeight: attrs.svgHeight\n        };\n        attrs.calc = calc;\n\n        // Calculate max node depth (it's needed for layout heights calculation)\n        calc.centerX = calc.chartWidth / 2;\n        calc.centerY = calc.chartHeight / 2;\n\n        // ******************* BEHAVIORS  **********************\n        if (attrs.firstDraw) {\n            const behaviors = {\n                zoom: null\n            };\n\n            // Get zooming function\n            behaviors.zoom = attrs.createZoom()\n                .clickDistance(10)\n                .on('start', (event, d) => attrs.onZoomStart(event))\n                .on('end', (event, d) => attrs.onZoomEnd(event))\n                .on(\"zoom\", (event, d) => {\n                    attrs.onZoom(event);\n                    this.zoomed(event, d);\n                })\n                .scaleExtent(attrs.scaleExtent)\n            attrs.zoomBehavior = behaviors.zoom;\n        }\n\n        //****************** ROOT node work ************************\n\n        attrs.flexTreeLayout = flextree({\n            nodeSize: node => {\n                const width = attrs.nodeWidth(node);;\n                const height = attrs.nodeHeight(node);\n                const siblingsMargin = attrs.siblingsMargin(node)\n                const childrenMargin = attrs.childrenMargin(node);\n                return attrs.layoutBindings[attrs.layout].nodeFlexSize({\n                    state: attrs,\n                    node: node,\n                    width,\n                    height,\n                    siblingsMargin,\n                    childrenMargin\n                });\n            }\n        })\n            .spacing((nodeA, nodeB) => nodeA.parent == nodeB.parent ? 0 : attrs.neighbourMargin(nodeA, nodeB));\n\n        this.setLayouts({ expandNodesFirst: false });\n\n        // *************************  DRAWING **************************\n        //Add svg\n        const svg = container\n            .patternify({\n                tag: \"svg\",\n                selector: \"svg-chart-container\"\n            })\n            .attr(\"width\", attrs.svgWidth)\n            .attr(\"height\", attrs.svgHeight)\n            .attr(\"font-family\", attrs.defaultFont)\n\n        if (attrs.firstDraw) {\n            svg.call(attrs.zoomBehavior)\n                .on(\"dblclick.zoom\", null)\n                .attr(\"cursor\", \"move\")\n        }\n\n        attrs.svg = svg;\n\n        //Add container g element\n        const chart = svg\n            .patternify({\n                tag: \"g\",\n                selector: \"chart\"\n            })\n\n        // Add one more container g element, for better positioning controls\n        attrs.centerG = chart\n            .patternify({\n                tag: \"g\",\n                selector: \"center-group\"\n            })\n\n        attrs.linksWrapper = attrs.centerG.patternify({\n            tag: \"g\",\n            selector: \"links-wrapper\"\n        })\n\n        attrs.nodesWrapper = attrs.centerG.patternify({\n            tag: \"g\",\n            selector: \"nodes-wrapper\"\n        })\n\n        attrs.connectionsWrapper = attrs.centerG.patternify({\n            tag: \"g\",\n            selector: \"connections-wrapper\"\n        })\n\n        attrs.defsWrapper = svg.patternify({\n            tag: \"g\",\n            selector: \"defs-wrapper\"\n        })\n\n        if (attrs.firstDraw) {\n            attrs.centerG.attr(\"transform\", () => {\n                return attrs.layoutBindings[attrs.layout].centerTransform({\n                    centerX: calc.centerX,\n                    centerY: calc.centerY,\n                    scale: attrs.lastTransform.k,\n                    rootMargin: attrs.rootMargin,\n                    root: attrs.root,\n                    chartHeight: calc.chartHeight,\n                    chartWidth: calc.chartWidth\n                })\n            });\n        }\n\n        attrs.chart = chart;\n\n        // Display tree contenrs\n        this.update(attrs.root);\n\n\n        //#########################################  UTIL FUNCS ##################################\n        // This function restyles foreign object elements ()\n\n        d3.select(window).on(`resize.${attrs.id}`, () => {\n            const containerRect = d3.select(attrs.container).node().getBoundingClientRect();\n            attrs.svg.attr('width', containerRect.width)\n        });\n\n        if (attrs.firstDraw) {\n            attrs.firstDraw = false;\n        }\n\n        return this;\n    }\n\n    // This function can be invoked via chart.addNode API, and it adds node in tree at runtime\n    addNode(obj) {\n        const attrs = this.getChartState();\n        if (obj && (attrs.parentNodeId(obj) == null || attrs.parentNodeId(obj) == attrs.nodeId(obj)) && attrs.data.length == 0) {\n            attrs.data.push(obj);\n            this.render()\n            return this;\n        }\n        const root = attrs.generateRoot(attrs.data)\n        const descendants = root.descendants();\n        const nodeFound = descendants.filter(({ data }) => attrs.nodeId(data).toString() === attrs.nodeId(obj).toString())[0];\n        const parentFound = descendants.filter(({ data }) => attrs.nodeId(data).toString() === attrs.parentNodeId(obj).toString())[0];\n        if (nodeFound) {\n            console.log(`ORG CHART - ADD - Node with id \"${attrs.nodeId(obj)}\" already exists in tree`)\n            return this;\n        }\n\n        if (obj._centered && !obj._expanded) obj._expanded = true;\n        attrs.data.push(obj);\n\n        // Update state of nodes and redraw graph\n        this.updateNodesState();\n\n        return this;\n    }\n\n    // This function can be invoked via chart.removeNode API, and it removes node from tree at runtime\n    removeNode(nodeId) {\n        const attrs = this.getChartState();\n        const root = attrs.generateRoot(attrs.data)\n        const descendants = root.descendants();\n        const node = descendants.filter(({ data }) => attrs.nodeId(data) == nodeId)[0];\n\n        if (!node) {\n            console.log(`ORG CHART - REMOVE - Node with id \"${nodeId}\" not found in the tree`);\n            return this;\n        }\n\n        // Get all node descendants\n        const nodeDescendants = node.descendants()\n\n        // Mark all node children and node itself for removal\n        nodeDescendants\n            .forEach(d => d.data._filteredOut = true)\n\n        // Filter out retrieved nodes and reassign data\n        attrs.data = attrs.data.filter(d => !d._filteredOut);\n\n        if (attrs.data.length == 0) {\n            this.render();\n        } else {\n            const updateNodesState = this.updateNodesState.bind(this);\n            // Update state of nodes and redraw graph\n            updateNodesState();\n        }\n        return this;\n    }\n\n    groupBy(array, accessor, aggegator) {\n        const grouped = {}\n        array.forEach(item => {\n            const key = accessor(item)\n            if (!grouped[key]) {\n                grouped[key] = []\n            }\n            grouped[key].push(item)\n        })\n\n        Object.keys(grouped).forEach(key => {\n            grouped[key] = aggegator(grouped[key])\n        })\n        return Object.entries(grouped);\n    }\n    calculateCompactFlexDimensions(root) {\n        const attrs = this.getChartState();\n        root.eachBefore(node => {\n            node.firstCompact = null;\n            node.compactEven = null;\n            node.flexCompactDim = null;\n            node.firstCompactNode = null;\n        })\n        root.eachBefore(node => {\n            if (node.children && node.children.length > 1) {\n                const compactChildren = node.children\n                    .filter(d => !d.children)\n\n                if (compactChildren.length < 2) return;\n                compactChildren.forEach((child, i) => {\n                    if (!i) child.firstCompact = true;\n                    if (i % 2) child.compactEven = false;\n                    else child.compactEven = true;\n                    child.row = Math.floor(i / 2);\n                })\n                const evenMaxColumnDimension = d3.max(compactChildren.filter(d => d.compactEven), attrs.layoutBindings[attrs.layout].compactDimension.sizeColumn);\n                const oddMaxColumnDimension = d3.max(compactChildren.filter(d => !d.compactEven), attrs.layoutBindings[attrs.layout].compactDimension.sizeColumn);\n                const columnSize = Math.max(evenMaxColumnDimension, oddMaxColumnDimension) * 2;\n                const rowsMapNew = this.groupBy(compactChildren, d => d.row, reducedGroup => d3.max(reducedGroup, d => attrs.layoutBindings[attrs.layout].compactDimension.sizeRow(d) + attrs.compactMarginBetween(d)));\n                const rowSize = d3.sum(rowsMapNew.map(v => v[1]))\n                compactChildren.forEach(node => {\n                    node.firstCompactNode = compactChildren[0];\n                    if (node.firstCompact) {\n                        node.flexCompactDim = [\n                            columnSize + attrs.compactMarginPair(node),\n                            rowSize - attrs.compactMarginBetween(node)\n                        ];\n                    } else {\n                        node.flexCompactDim = [0, 0];\n                    }\n                })\n                node.flexCompactDim = null;\n            }\n        })\n    }\n\n    calculateCompactFlexPositions(root) {\n        const attrs = this.getChartState();\n        root.eachBefore(node => {\n            if (node.children) {\n                const compactChildren = node.children.filter(d => d.flexCompactDim);\n                const fch = compactChildren[0];\n                if (!fch) return;\n                compactChildren.forEach((child, i, arr) => {\n                    if (i == 0) fch.x -= fch.flexCompactDim[0] / 2;\n                    if (i & i % 2 - 1) child.x = fch.x + fch.flexCompactDim[0] * 0.25 - attrs.compactMarginPair(child) / 4;\n                    else if (i) child.x = fch.x + fch.flexCompactDim[0] * 0.75 + attrs.compactMarginPair(child) / 4;\n                })\n                const centerX = fch.x + fch.flexCompactDim[0] * 0.5;\n                fch.x = fch.x + fch.flexCompactDim[0] * 0.25 - attrs.compactMarginPair(fch) / 4;\n                const offsetX = node.x - centerX;\n                if (Math.abs(offsetX) < 10) {\n                    compactChildren.forEach(d => d.x += offsetX);\n                }\n\n                const rowsMapNew = this.groupBy(compactChildren, d => d.row, reducedGroup => d3.max(reducedGroup, d => attrs.layoutBindings[attrs.layout].compactDimension.sizeRow(d)));\n                const cumSum = d3.cumsum(rowsMapNew.map(d => d[1] + attrs.compactMarginBetween(d)));\n                compactChildren\n                    .forEach((node, i) => {\n                        if (node.row) {\n                            node.y = fch.y + cumSum[node.row - 1]\n                        } else {\n                            node.y = fch.y;\n                        }\n                    })\n\n            }\n        })\n    }\n\n    // This function basically redraws visible graph, based on nodes state\n    update({ x0, y0, x = 0, y = 0, width, height }) {\n        const attrs = this.getChartState();\n        const calc = attrs.calc;\n\n        // Paging\n        if (attrs.compact) {\n            this.calculateCompactFlexDimensions(attrs.root);\n        }\n\n        //  Assigns the x and y position for the nodes\n        const treeData = attrs.flexTreeLayout(attrs.root);\n\n        // Reassigns the x and y position for the based on the compact layout\n        if (attrs.compact) {\n            this.calculateCompactFlexPositions(attrs.root);\n        }\n\n        const nodes = treeData.descendants();\n\n        // console.table(nodes.map(d => ({ x: d.x, y: d.y, width: d.width, height: d.height, flexCompactDim: d.flexCompactDim + \"\" })))\n\n        // Get all links\n        const links = treeData.descendants().slice(1);\n        nodes.forEach(attrs.layoutBindings[attrs.layout].swap)\n\n        // Connections\n        const connections = attrs.connections;\n        const allNodesMap = {};\n        attrs.allNodes.forEach(d => allNodesMap[attrs.nodeId(d.data)] = d);\n\n        const visibleNodesMap = {}\n        nodes.forEach(d => visibleNodesMap[attrs.nodeId(d.data)] = d);\n\n        connections.forEach(connection => {\n            const source = allNodesMap[connection.from];\n            const target = allNodesMap[connection.to];\n            connection._source = source;\n            connection._target = target;\n        })\n        const visibleConnections = connections.filter(d => visibleNodesMap[d.from] && visibleNodesMap[d.to]);\n        const defsString = attrs.defs.bind(this)(attrs, visibleConnections);\n        const existingString = attrs.defsWrapper.html();\n        if (defsString !== existingString) {\n            attrs.defsWrapper.html(defsString)\n        }\n\n        // --------------------------  LINKS ----------------------\n        // Get links selection\n        const linkSelection = attrs.linksWrapper\n            .selectAll(\"path.link\")\n            .data(links, (d) => attrs.nodeId(d.data));\n\n        // Enter any new links at the parent's previous position.\n        const linkEnter = linkSelection\n            .enter()\n            .insert(\"path\", \"g\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", (d) => {\n                const xo = attrs.layoutBindings[attrs.layout].linkJoinX({ x: x0, y: y0, width, height });\n                const yo = attrs.layoutBindings[attrs.layout].linkJoinY({ x: x0, y: y0, width, height });\n                const o = { x: xo, y: yo };\n                return attrs.layoutBindings[attrs.layout].diagonal(o, o, o);\n            });\n\n        // Get links update selection\n        const linkUpdate = linkEnter.merge(linkSelection);\n\n        // Styling links\n        linkUpdate\n            .attr(\"fill\", \"none\")\n\n\n        if (this.isEdge()) {\n            linkUpdate\n                .style('display', d => {\n                    const display = d.data._pagingButton ? 'none' : 'auto'\n                    return display;\n                })\n        } else {\n            linkUpdate\n                .attr('display', d => {\n                    const display = d.data._pagingButton ? 'none' : 'auto'\n                    return display;\n                })\n        }\n\n        // Allow external modifications\n        linkUpdate.each(attrs.linkUpdate);\n\n        // Transition back to the parent element position\n        linkUpdate\n            .transition()\n            .duration(attrs.duration)\n            .attr(\"d\", (d) => {\n                const n = attrs.compact && d.flexCompactDim ?\n                    {\n                        x: attrs.layoutBindings[attrs.layout].compactLinkMidX(d, attrs),\n                        y: attrs.layoutBindings[attrs.layout].compactLinkMidY(d, attrs)\n                    } :\n                    {\n                        x: attrs.layoutBindings[attrs.layout].linkX(d),\n                        y: attrs.layoutBindings[attrs.layout].linkY(d)\n                    };\n\n                const p = {\n                    x: attrs.layoutBindings[attrs.layout].linkParentX(d),\n                    y: attrs.layoutBindings[attrs.layout].linkParentY(d),\n                };\n\n                const m = attrs.compact && d.flexCompactDim ? {\n                    x: attrs.layoutBindings[attrs.layout].linkCompactXStart(d),\n                    y: attrs.layoutBindings[attrs.layout].linkCompactYStart(d),\n                } : n;\n                return attrs.layoutBindings[attrs.layout].diagonal(n, p, m, { sy: attrs.linkYOffset });\n            });\n\n        // Remove any  links which is exiting after animation\n        const linkExit = linkSelection\n            .exit()\n            .transition()\n            .duration(attrs.duration)\n            .attr(\"d\", (d) => {\n                const xo = attrs.layoutBindings[attrs.layout].linkJoinX({ x, y, width, height });\n                const yo = attrs.layoutBindings[attrs.layout].linkJoinY({ x, y, width, height });\n                const o = { x: xo, y: yo };\n                return attrs.layoutBindings[attrs.layout].diagonal(o, o, null, { sy: attrs.linkYOffset });\n            })\n            .remove();\n\n\n        // --------------------------  CONNECTIONS ----------------------\n\n        const connectionsSel = attrs.connectionsWrapper\n            .selectAll(\"path.connection\")\n            .data(visibleConnections)\n\n        // Enter any new connections at the parent's previous position.\n        const connEnter = connectionsSel\n            .enter()\n            .insert(\"path\", \"g\")\n            .attr(\"class\", \"connection\")\n            .attr(\"d\", (d) => {\n                const xo = attrs.layoutBindings[attrs.layout].linkJoinX({ x: x0, y: y0, width, height });\n                const yo = attrs.layoutBindings[attrs.layout].linkJoinY({ x: x0, y: y0, width, height });\n                const o = { x: xo, y: yo };\n                return attrs.layoutBindings[attrs.layout].diagonal(o, o, null, { sy: attrs.linkYOffset });\n            });\n\n\n        // Get connections update selection\n        const connUpdate = connEnter.merge(connectionsSel);\n\n        // Styling connections\n        connUpdate.attr(\"fill\", \"none\")\n\n        // Transition back to the parent element position\n        connUpdate\n            .transition()\n            .duration(attrs.duration)\n            .attr('d', (d) => {\n                const xs = attrs.layoutBindings[attrs.layout].linkX({ x: d._source.x, y: d._source.y, width: d._source.width, height: d._source.height });\n                const ys = attrs.layoutBindings[attrs.layout].linkY({ x: d._source.x, y: d._source.y, width: d._source.width, height: d._source.height });\n                const xt = attrs.layoutBindings[attrs.layout].linkJoinX({ x: d._target.x, y: d._target.y, width: d._target.width, height: d._target.height });\n                const yt = attrs.layoutBindings[attrs.layout].linkJoinY({ x: d._target.x, y: d._target.y, width: d._target.width, height: d._target.height });\n                return attrs.linkGroupArc({ source: { x: xs, y: ys }, target: { x: xt, y: yt } })\n            })\n\n        // Allow external modifications\n        connUpdate.each(attrs.connectionsUpdate);\n\n        // Remove any  links which is exiting after animation\n        const connExit = connectionsSel\n            .exit()\n            .transition()\n            .duration(attrs.duration)\n            .attr('opacity', 0)\n            .remove();\n\n        // --------------------------  NODES ----------------------\n        // Get nodes selection\n        const nodesSelection = attrs.nodesWrapper\n            .selectAll(\"g.node\")\n            .data(nodes, ({ data }) => attrs.nodeId(data));\n\n        // Enter any new nodes at the parent's previous position.\n        const nodeEnter = nodesSelection\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"node\")\n            .attr(\"transform\", (d) => {\n                if (d == attrs.root) return `translate(${x0},${y0})`\n                const xj = attrs.layoutBindings[attrs.layout].nodeJoinX({ x: x0, y: y0, width, height });\n                const yj = attrs.layoutBindings[attrs.layout].nodeJoinY({ x: x0, y: y0, width, height });\n                return `translate(${xj},${yj})`\n            })\n            .attr(\"cursor\", \"pointer\")\n            .on(\"click.node\", (event, node) => {\n                const { data } = node;\n                if ([...event.srcElement.classList].includes(\"node-button-foreign-object\")) {\n                    return;\n                }\n                if ([...event.srcElement.classList].includes(\"paging-button-wrapper\")) {\n                    this.loadPagingNodes(node);\n                    return;\n                }\n                if (!data._pagingButton) {\n                    attrs.onNodeClick(node);\n                    return;\n                }\n                console.log('event fired, no handlers')\n            })\n            //  Event handler to the expand button\n            .on(\"keydown.node\", (event, node) => {\n                const { data } = node;\n                if (event.key === 'Enter' || event.key === ' ' || event.key === 'Spacebar') {\n                    if ([...event.srcElement.classList].includes(\"node-button-foreign-object\")) {\n                        return;\n                    }\n                    if ([...event.srcElement.classList].includes(\"paging-button-wrapper\")) {\n                        this.loadPagingNodes(node);\n                        return;\n                    }\n                    if (event.key === 'Enter' || event.key === ' ' || event.key === 'Spacebar') {\n                        this.onButtonClick(event, node)\n                    }\n                }\n            });\n        nodeEnter.each(attrs.nodeEnter)\n\n        // Add background rectangle for the nodes\n        nodeEnter\n            .patternify({\n                tag: \"rect\",\n                selector: \"node-rect\",\n                data: (d) => [d]\n            })\n\n        // Node update styles\n        const nodeUpdate = nodeEnter\n            .merge(nodesSelection)\n            .style(\"font\", \"12px sans-serif\");\n\n        // Add foreignObject element inside rectangle\n        const fo = nodeUpdate.patternify({\n            tag: \"foreignObject\",\n            selector: \"node-foreign-object\",\n            data: (d) => [d]\n        })\n            .style('overflow', 'visible')\n\n        // Add foreign object\n        fo.patternify({\n            tag: \"xhtml:div\",\n            selector: \"node-foreign-object-div\",\n            data: (d) => [d]\n        })\n\n        this.restyleForeignObjectElements();\n\n        // Add Node button circle's group (expand-collapse button)\n        const nodeButtonGroups = nodeEnter\n            .patternify({\n                tag: \"g\",\n                selector: \"node-button-g\",\n                data: (d) => [d]\n            })\n            .on(\"click\", (event, d) => this.onButtonClick(event, d))\n            .on(\"keydown\", (event, d) => {\n                if (event.key === 'Enter' || event.key === ' ' || event.key === 'Spacebar') {\n                    this.onButtonClick(event, d)\n                }\n            });\n\n        nodeButtonGroups.patternify({\n            tag: 'rect',\n            selector: 'node-button-rect',\n            data: (d) => [d]\n        })\n            .attr('opacity', 0)\n            .attr('pointer-events', 'all')\n            .attr('width', d => attrs.nodeButtonWidth(d))\n            .attr('height', d => attrs.nodeButtonHeight(d))\n            .attr('x', d => attrs.nodeButtonX(d))\n            .attr('y', d => attrs.nodeButtonY(d))\n\n        // Add expand collapse button content\n        const nodeFo = nodeButtonGroups\n            .patternify({\n                tag: \"foreignObject\",\n                selector: \"node-button-foreign-object\",\n                data: (d) => [d]\n            })\n            .attr('width', d => attrs.nodeButtonWidth(d))\n            .attr('height', d => attrs.nodeButtonHeight(d))\n            .attr('x', d => attrs.nodeButtonX(d))\n            .attr('y', d => attrs.nodeButtonY(d))\n            .style('overflow', 'visible')\n            .patternify({\n                tag: \"xhtml:div\",\n                selector: \"node-button-div\",\n                data: (d) => [d]\n            })\n            .style('pointer-events', 'none')\n            .style('display', 'flex')\n            .style('width', '100%')\n            .style('height', '100%')\n\n\n\n        // Transition to the proper position for the node\n        nodeUpdate\n            .transition()\n            .attr(\"opacity\", 0)\n            .duration(attrs.duration)\n            .attr(\"transform\", ({ x, y, width, height }) => {\n                return attrs.layoutBindings[attrs.layout].nodeUpdateTransform({ x, y, width, height });\n\n            })\n            .attr(\"opacity\", 1);\n\n        // Style node rectangles\n        nodeUpdate\n            .select(\".node-rect\")\n            .attr(\"width\", ({ width }) => width)\n            .attr(\"height\", ({ height }) => height)\n            .attr(\"x\", ({ width }) => 0)\n            .attr(\"y\", ({ height }) => 0)\n            .attr(\"cursor\", \"pointer\")\n            .attr('rx', 3)\n            .attr(\"fill\", attrs.nodeDefaultBackground)\n\n\n        nodeUpdate.select(\".node-button-g\").attr(\"transform\", ({ data, width, height }) => {\n            const x = attrs.layoutBindings[attrs.layout].buttonX({ width, height });\n            const y = attrs.layoutBindings[attrs.layout].buttonY({ width, height });\n            return `translate(${x},${y})`\n        })\n            .attr(\"display\", ({ data }) => {\n                return data._directSubordinates > 0 ? null : 'none';\n            })\n            .attr(\"opacity\", ({ data, children, _children }) => {\n                if (data._pagingButton) {\n                    return 0;\n                }\n                if (children || _children) {\n                    return 1;\n                }\n                return 0;\n            });\n\n        // Restyle node button circle\n        nodeUpdate\n            .select(\".node-button-foreign-object .node-button-div\")\n            .html((node) => {\n                return attrs.buttonContent({ node, state: attrs })\n            })\n\n        // Restyle button texts\n        nodeUpdate\n            .select(\".node-button-text\")\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"alignment-baseline\", \"middle\")\n            .attr(\"font-size\", ({ children }) => {\n                if (children) return 40;\n                return 26;\n            })\n            .text(({ children }) => {\n                if (children) return \"-\";\n                return \"+\";\n            })\n            .attr(\"y\", this.isEdge() ? 10 : 0);\n\n        nodeUpdate.each(attrs.nodeUpdate)\n\n        // Remove any exiting nodes after transition\n        const nodeExitTransition = nodesSelection\n            .exit()\n        nodeExitTransition.each(attrs.nodeExit)\n\n        const maxDepthNode = nodeExitTransition.data().reduce((a, b) => a.depth < b.depth ? a : b, { depth: Infinity });\n\n        nodeExitTransition.attr(\"opacity\", 1)\n            .transition()\n            .duration(attrs.duration)\n            .attr(\"transform\", (d) => {\n\n                let { x, y, width, height } = maxDepthNode.parent || {};\n                const ex = attrs.layoutBindings[attrs.layout].nodeJoinX({ x, y, width, height });\n                const ey = attrs.layoutBindings[attrs.layout].nodeJoinY({ x, y, width, height });\n                return `translate(${ex},${ey})`\n            })\n            .on(\"end\", function () {\n                d3.select(this).remove();\n            })\n            .attr(\"opacity\", 0);\n\n        // Store the old positions for transition.\n        nodes.forEach((d) => {\n            d.x0 = d.x;\n            d.y0 = d.y;\n        });\n\n        // CHECK FOR CENTERING\n        const centeredNode = attrs.allNodes.filter(d => d.data._centered)[0]\n        if (centeredNode) {\n            let centeredNodes = [centeredNode]\n            if (centeredNode.data._centeredWithDescendants) {\n                if (attrs.compact) {\n                    centeredNodes = centeredNode.descendants().filter((d, i) => i < 7);\n                } else {\n                    centeredNodes = centeredNode.descendants().filter((d, i, arr) => {\n                        const h = Math.round(arr.length / 2);\n                        const spread = 2;\n                        if (arr.length % 2) {\n                            return i > h - spread && i < h + spread - 1;\n                        }\n\n                        return i > h - spread && i < h + spread;\n                    });\n                }\n\n            }\n            centeredNode.data._centeredWithDescendants = null;\n            centeredNode.data._centered = null;\n            this.fit({\n                animate: true,\n                scale: false,\n                nodes: centeredNodes\n            })\n        }\n\n    }\n\n    // This function detects whether current browser is edge\n    isEdge() {\n        return window.navigator.userAgent.includes(\"Edge\");\n    }\n\n    // Generate horizontal diagonal - play with it here - https://observablehq.com/@bumbeishvili/curved-edges-horizontal-d3-v3-v4-v5-v6\n    hdiagonal(s, t, m, offsets) {\n        const state = this.getChartState();\n        return state.hdiagonal(s, t, m, offsets);\n    }\n\n    // Generate custom diagonal - play with it here - https://observablehq.com/@bumbeishvili/curved-edges\n    diagonal(s, t, m, offsets) {\n        const state = this.getChartState();\n        return state.diagonal(s, t, m, offsets);\n    }\n\n    restyleForeignObjectElements() {\n        const attrs = this.getChartState();\n\n        attrs.svg\n            .selectAll(\".node-foreign-object\")\n            .attr(\"width\", ({ width }) => width)\n            .attr(\"height\", ({ height }) => height)\n            .attr(\"x\", ({ width }) => 0)\n            .attr(\"y\", ({ height }) => 0);\n        attrs.svg\n            .selectAll(\".node-foreign-object-div\")\n            .style(\"width\", ({ width }) => `${width}px`)\n            .style(\"height\", ({ height }) => `${height}px`)\n            .html(function (d, i, arr) {\n                if (d.data._pagingButton) {\n                    return `<div class=\"paging-button-wrapper\"><div style=\"pointer-events:none\">${attrs.pagingButton(d, i, arr, attrs)}</div></div>`;\n                }\n                return attrs.nodeContent.bind(this)(d, i, arr, attrs)\n            })\n    }\n\n    // Toggle children on click.\n    onButtonClick(event, d) {\n        const attrs = this.getChartState();\n        if (d.data._pagingButton) {\n            return;\n        }\n        if (attrs.setActiveNodeCentered) {\n            d.data._centered = true;\n            d.data._centeredWithDescendants = true;\n        }\n\n        // If childrens are expanded\n        if (d.children) {\n            //Collapse them\n            d._children = d.children;\n            d.children = null;\n\n            // Set descendants expanded property to false\n            this.setExpansionFlagToChildren(d, false);\n        } else {\n            // Expand children\n            d.children = d._children;\n            d._children = null;\n\n            // Set each children as expanded\n            if (d.children) {\n                d.children.forEach(({ data }) => (data._expanded = true));\n            }\n        }\n\n        // Redraw Graph\n        this.update(d);\n        event.stopPropagation();\n\n        // Trigger callback\n        attrs.onExpandOrCollapse(d);\n\n    }\n\n    // This function changes `expanded` property to descendants\n    setExpansionFlagToChildren({ data, children, _children }, flag) {\n        // Set flag to the current property\n        data._expanded = flag;\n\n        // Loop over and recursively update expanded children's descendants\n        if (children) {\n            children.forEach((d) => {\n                this.setExpansionFlagToChildren(d, flag);\n            });\n        }\n\n        // Loop over and recursively update collapsed children's descendants\n        if (_children) {\n            _children.forEach((d) => {\n                this.setExpansionFlagToChildren(d, flag);\n            });\n        }\n    }\n\n\n    // Method which only expands nodes, which have property set \"expanded=true\"\n    expandSomeNodes(d) {\n        // If node has expanded property set\n        if (d.data._expanded) {\n            // Retrieve node's parent\n            let parent = d.parent;\n\n            // While we can go up\n            while (parent && parent._children) {\n                // Expand all current parent's children\n                parent.children = parent._children;\n                parent._children = null;\n                // Replace current parent holding object\n                parent = parent.parent;\n            }\n        }\n\n        // Recursively do the same for collapsed nodes\n        if (d._children) {\n            d._children.forEach((ch) => this.expandSomeNodes(ch));\n        }\n\n        // Recursively do the same for expanded nodes\n        if (d.children) {\n            d.children.forEach((ch) => this.expandSomeNodes(ch));\n        }\n    }\n\n    // This function updates nodes state and redraws graph, usually after data change\n    updateNodesState() {\n        const attrs = this.getChartState();\n\n\n        this.setLayouts({ expandNodesFirst: true });\n\n        // Redraw Graphs\n        this.update(attrs.root);\n    }\n\n    setLayouts({ expandNodesFirst = true }) {\n        const attrs = this.getChartState();\n        // Store new root by converting flat data to hierarchy\n\n        attrs.generateRoot = d3\n            .stratify()\n            .id((d) => attrs.nodeId(d))\n            .parentId(d => attrs.parentNodeId(d))\n        attrs.root = attrs.generateRoot(attrs.data);\n\n        const descendantsBefore = attrs.root.descendants();\n        if (attrs.initialExpandLevel > 1 && descendantsBefore.length > 0) {\n            descendantsBefore.forEach((d) => {\n                if (d.depth <= attrs.initialExpandLevel) {\n                    d.data._expanded = true;\n                }\n            })\n            attrs.initialExpandLevel = 1;\n        }\n\n\n        const hiddenNodesMap = {};\n        attrs.root.descendants()\n            .filter(node => node.children)\n            .filter(node => !node.data._pagingStep)\n            .forEach(node => {\n                node.data._pagingStep = attrs.minPagingVisibleNodes(node);\n            })\n\n\n\n        attrs.root.eachBefore((node, i) => {\n            node.data._directSubordinatesPaging = node.children ? node.children.length : 0;\n            if (node.children) {\n                node.children.forEach((child, j) => {\n                    child.data._pagingButton = false;\n                    if (j > node.data._pagingStep) {\n                        hiddenNodesMap[child.id] = true;\n                    }\n                    if (j === node.data._pagingStep && (node.children.length - 1) > node.data._pagingStep) {\n                        child.data._pagingButton = true;\n                    }\n                    if (hiddenNodesMap[child.parent.id]) {\n                        hiddenNodesMap[child.id] = true;\n                    }\n                    if (child.data._expanded || child.data._centered || child.data._highlighted || child.data._upToTheRootHighlighted) {\n                        let localNode = child;\n                        while (localNode && (hiddenNodesMap[localNode.id] || localNode.data._pagingButton)) {\n                            hiddenNodesMap[localNode.id] = false;\n                            if (localNode.data._pagingButton) {\n                                localNode.data._pagingButton = false;\n                                localNode.parent.children.forEach(ch => {\n                                    ch.data._expanded = true;\n                                    hiddenNodesMap[ch.id] = false;\n                                })\n                            }\n                            localNode = localNode.parent;\n                        }\n                    }\n                })\n            }\n        })\n\n\n        attrs.root = d3\n            .stratify()\n            .id((d) => attrs.nodeId(d))\n            .parentId(d => attrs.parentNodeId(d))(attrs.data.filter(d => hiddenNodesMap[d.id] !== true));\n\n        attrs.root.each((node, i, arr) => {\n            let _hierarchyHeight = node._hierarchyHeight || node.height\n            let width = attrs.nodeWidth(node);\n            let height = attrs.nodeHeight(node);\n            Object.assign(node, { width, height, _hierarchyHeight })\n        })\n\n        // Store positions, where children appear during their enter animation\n        attrs.root.x0 = 0;\n        attrs.root.y0 = 0;\n        attrs.allNodes = attrs.root.descendants();\n\n        // Store direct and total descendants count\n        attrs.allNodes.forEach((d) => {\n            Object.assign(d.data, {\n                _directSubordinates: d.children ? d.children.length : 0,\n                _totalSubordinates: d.descendants().length - 1\n            });\n        });\n\n        if (attrs.root.children) {\n            if (expandNodesFirst) {\n                // Expand all nodes first\n                attrs.root.children.forEach(this.expand);\n            }\n            // Then collapse them all\n            attrs.root.children.forEach((d) => this.collapse(d));\n\n            // Collapse root if level is 0\n            if (attrs.initialExpandLevel == 0) {\n                attrs.root._children = attrs.root.children;\n                attrs.root.children = null;\n            }\n\n            // Then only expand nodes, which have expanded property set to true\n            [attrs.root].forEach((ch) => this.expandSomeNodes(ch));\n        }\n    }\n\n    // Function which collapses passed node and it's descendants\n    collapse(d) {\n        if (d.children) {\n            d._children = d.children;\n            d._children.forEach((ch) => this.collapse(ch));\n            d.children = null;\n        }\n    }\n\n    // Function which expands passed node and it's descendants\n    expand(d) {\n        if (d._children) {\n            d.children = d._children;\n            d.children.forEach((ch) => this.expand(ch));\n            d._children = null;\n        }\n    }\n\n    // Zoom handler function\n    zoomed(event, d) {\n        const attrs = this.getChartState();\n        const chart = attrs.chart;\n\n        // Get d3 event's transform object\n        const transform = event.transform;\n\n        // Store it\n        attrs.lastTransform = transform;\n\n        // Reposition and rescale chart accordingly\n        chart.attr(\"transform\", transform);\n\n        // Apply new styles to the foreign object element\n        if (this.isEdge()) {\n            this.restyleForeignObjectElements();\n        }\n    }\n\n    zoomTreeBounds({ x0, x1, y0, y1, params = { animate: true, scale: true, onCompleted: () => { } } }) {\n        const { centerG, svgWidth: w, svgHeight: h, svg, zoomBehavior, duration, lastTransform } = this.getChartState()\n        let scaleVal = Math.min(8, 0.9 / Math.max((x1 - x0) / w, (y1 - y0) / h));\n        let identity = d3.zoomIdentity.translate(w / 2, h / 2)\n        identity = identity.scale(params.scale ? scaleVal : lastTransform.k)\n\n        identity = identity.translate(-(x0 + x1) / 2, -(y0 + y1) / 2);\n        // Transition zoom wrapper component into specified bounds\n        svg.transition().duration(params.animate ? duration : 0).call(zoomBehavior.transform, identity);\n        centerG.transition().duration(params.animate ? duration : 0).attr('transform', 'translate(0,0)')\n            .on('end', function () {\n                if (params.onCompleted) {\n                    params.onCompleted()\n                }\n            })\n    }\n\n    fit({ animate = true, nodes, scale = true, onCompleted = () => { } } = {}) {\n        const attrs = this.getChartState();\n        const { root } = attrs;\n        let descendants = nodes ? nodes : root.descendants();\n        const minX = d3.min(descendants, d => d.x + attrs.layoutBindings[attrs.layout].nodeLeftX(d))\n        const maxX = d3.max(descendants, d => d.x + attrs.layoutBindings[attrs.layout].nodeRightX(d))\n        const minY = d3.min(descendants, d => d.y + attrs.layoutBindings[attrs.layout].nodeTopY(d))\n        const maxY = d3.max(descendants, d => d.y + attrs.layoutBindings[attrs.layout].nodeBottomY(d))\n\n        this.zoomTreeBounds({\n            params: { animate: animate, scale, onCompleted },\n            x0: minX - 50,\n            x1: maxX + 50,\n            y0: minY - 50,\n            y1: maxY + 50,\n\n        });\n        return this;\n    }\n\n    // Load Paging Nodes\n    loadPagingNodes(node) {\n        const attrs = this.getChartState();\n        node.data._pagingButton = false;\n        const current = node.parent.data._pagingStep;\n        const step = attrs.pagingStep(node.parent)\n        const newPagingIndex = current + step;\n        node.parent.data._pagingStep = newPagingIndex;\n        this.updateNodesState();\n    }\n\n    // This function can be invoked via chart.setExpanded API, it expands or collapses particular node\n    setExpanded(id, expandedFlag = true) {\n\n        const attrs = this.getChartState();\n        // Retrieve node by node Id\n        const node = attrs.allNodes.filter(({ data }) => attrs.nodeId(data) == id)[0];\n\n        if (!node) {\n            console.log(`ORG CHART - ${expandedFlag ? \"EXPAND\" : \"COLLAPSE\"} - Node with id (${id})  not found in the tree`)\n            return this;\n        }\n        node.data._expanded = expandedFlag;\n        if (expandedFlag == false) {\n            const parent = node.parent || { descendants: () => [] };\n            const descendants = parent.descendants().filter(d => d != parent);\n            descendants.forEach(d => d.data._expanded = false)\n        }\n\n\n        return this;\n    }\n\n    setCentered(nodeId) {\n        const attrs = this.getChartState();\n        // this.setExpanded(nodeId)\n        const root = attrs.generateRoot(attrs.data)\n        const descendants = root.descendants();\n        const node = descendants.filter(({ data }) => attrs.nodeId(data).toString() == nodeId.toString())[0];\n        if (!node) {\n            console.log(`ORG CHART - CENTER - Node with id (${nodeId}) not found in the tree`)\n            return this;\n        }\n        const ancestors = node.ancestors();\n        ancestors.forEach(d => d.data._expanded = true)\n        node.data._centered = true;\n        node.data._expanded = true;\n        return this;\n    }\n\n    setHighlighted(nodeId) {\n        const attrs = this.getChartState();\n        const root = attrs.generateRoot(attrs.data)\n        const descendants = root.descendants();\n        const node = descendants.filter(d => attrs.nodeId(d.data).toString() === nodeId.toString())[0];\n        if (!node) {\n            console.log(`ORG CHART - HIGHLIGHT - Node with id (${nodeId})  not found in the tree`);\n            return this\n        }\n        const ancestors = node.ancestors();\n        ancestors.forEach(d => d.data._expanded = true)\n        node.data._highlighted = true;\n        node.data._expanded = true;\n        node.data._centered = true;\n        return this;\n    }\n\n    setUpToTheRootHighlighted(nodeId) {\n        const attrs = this.getChartState();\n        const root = attrs.generateRoot(attrs.data)\n        const descendants = root.descendants();\n        const node = descendants.filter(d => attrs.nodeId(d.data).toString() === nodeId.toString())[0];\n        if (!node) {\n            console.log(`ORG CHART - HIGHLIGHTROOT - Node with id (${nodeId}) not found in the tree`)\n            return this;\n        }\n        const ancestors = node.ancestors();\n        ancestors.forEach(d => d.data._expanded = true)\n        node.data._upToTheRootHighlighted = true;\n        node.data._expanded = true;\n        node.ancestors().forEach(d => d.data._upToTheRootHighlighted = true)\n        return this;\n    }\n\n    clearHighlighting() {\n        const attrs = this.getChartState();\n        attrs.allNodes.forEach(d => {\n            d.data._highlighted = false;\n            d.data._upToTheRootHighlighted = false;\n        })\n        this.update(attrs.root);\n        return this;\n    }\n\n    // It can take selector which would go fullscreen\n    fullscreen(elem) {\n        const attrs = this.getChartState();\n        const el = d3.select(elem || attrs.container).node();\n\n        d3.select(document).on('fullscreenchange.' + attrs.id, function (d) {\n            const fsElement = document.fullscreenElement || document.mozFullscreenElement || document.webkitFullscreenElement;\n            if (fsElement == el) {\n                setTimeout(d => {\n                    attrs.svg.attr('height', window.innerHeight - 40);\n                }, 500)\n            } else {\n                attrs.svg.attr('height', attrs.svgHeight)\n            }\n        })\n\n        if (el.requestFullscreen) {\n            el.requestFullscreen();\n        } else if (el.mozRequestFullScreen) {\n            el.mozRequestFullScreen();\n        } else if (el.webkitRequestFullscreen) {\n            el.webkitRequestFullscreen();\n        } else if (el.msRequestFullscreen) {\n            el.msRequestFullscreen();\n        }\n    }\n\n    // Zoom in exposed method\n    zoomIn() {\n        const { svg, zoomBehavior } = this.getChartState();\n        svg.transition().call(zoomBehavior.scaleBy, 1.3);\n    }\n\n    // Zoom out exposed method\n    zoomOut() {\n        const { svg, zoomBehavior } = this.getChartState();\n        svg.transition().call(zoomBehavior.scaleBy, 0.78);\n    }\n\n    toDataURL(url, callback) {\n        var xhr = new XMLHttpRequest();\n        xhr.onload = function () {\n            var reader = new FileReader();\n            reader.onloadend = function () {\n                callback(reader.result);\n            }\n            reader.readAsDataURL(xhr.response);\n        };\n        xhr.open('GET', url);\n        xhr.responseType = 'blob';\n        xhr.send();\n    }\n\n    exportImg({ full = false, scale = 3, onLoad = d => d, save = true, backgroundColor = \"#FAFAFA\" } = {}) {\n        const that = this;\n        const attrs = this.getChartState();\n        const { svg: svgImg, root } = attrs\n        let count = 0;\n        const selection = svgImg.selectAll('img')\n        let total = selection.size()\n\n        const exportImage = () => {\n            const transform = JSON.parse(JSON.stringify(that.lastTransform()));\n            const duration = that.duration();\n            if (full) {\n                that.fit();\n            }\n            const { svg } = that.getChartState()\n\n            setTimeout(d => {\n                that.downloadImage({\n                    node: svg.node(), scale,\n                    isSvg: false,\n                    backgroundColor,\n                    onAlreadySerialized: d => {\n                        that.update(root)\n                    },\n                    imageName: attrs.imageName,\n                    onLoad: onLoad,\n                    save\n                })\n            }, full ? duration + 10 : 0)\n        }\n\n        if (total > 0) {\n            selection\n                .each(function () {\n                    that.toDataURL(this.src, (dataUrl) => {\n                        this.src = dataUrl;\n                        if (++count == total) {\n                            exportImage();\n                        }\n                    })\n                })\n        } else {\n            exportImage();\n        }\n\n\n    }\n\n\n\n    exportSvg() {\n        const { svg, imageName } = this.getChartState();\n        this.downloadImage({ imageName: imageName, node: svg.node(), scale: 3, isSvg: true })\n        return this;\n    }\n\n    expandAll() {\n        const { allNodes, root, data } = this.getChartState();\n        data.forEach(d => d._expanded = true)\n        // allNodes.forEach(d => d.data._expanded = true);\n        this.render()\n        return this;\n    }\n\n    collapseAll() {\n        const { allNodes, root } = this.getChartState();\n        allNodes.forEach(d => d.data._expanded = false);\n        this.initialExpandLevel(0)\n        this.render();\n        return this;\n    }\n\n    downloadImage({ node, scale = 2, imageName = 'graph', isSvg = false, save = true, backgroundColor = \"#FAFAFA\", onAlreadySerialized = d => { }, onLoad = d => { } }) {\n        // Retrieve svg node\n        const svgNode = node;\n\n        function saveAs(uri, filename) {\n            // create link\n            var link = document.createElement('a');\n            if (typeof link.download === 'string') {\n                document.body.appendChild(link); // Firefox requires the link to be in the body\n                link.download = filename;\n                link.href = uri;\n                link.click();\n                document.body.removeChild(link); // remove the link when done\n            } else {\n                location.replace(uri);\n            }\n        }\n        // This function serializes SVG and sets all necessary attributes\n        function serializeString(svg) {\n            const xmlns = 'http://www.w3.org/2000/xmlns/';\n            const xlinkns = 'http://www.w3.org/1999/xlink';\n            const svgns = 'http://www.w3.org/2000/svg';\n            svg = svg.cloneNode(true);\n            const fragment = window.location.href + '#';\n            const walker = document.createTreeWalker(svg, NodeFilter.SHOW_ELEMENT, null, false);\n            while (walker.nextNode()) {\n                for (const attr of walker.currentNode.attributes) {\n                    if (attr.value.includes(fragment)) {\n                        attr.value = attr.value.replace(fragment, '#');\n                    }\n                }\n            }\n            svg.setAttributeNS(xmlns, 'xmlns', svgns);\n            svg.setAttributeNS(xmlns, 'xmlns:xlink', xlinkns);\n            const serializer = new XMLSerializer();\n            const string = serializer.serializeToString(svg);\n            return string;\n        }\n\n        if (isSvg) {\n            let source = serializeString(svgNode);\n            //add xml declaration\n            source = '<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n' + source;\n            //convert svg source to URI data scheme.\n            var url = \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(source);\n            saveAs(url, imageName + \".svg\");\n            onAlreadySerialized()\n            return;\n        }\n        // Get image quality index (basically,  index you can zoom in)\n        const quality = scale\n        // Create image\n        const image = document.createElement('img');\n        image.onload = function () {\n            // Create image canvas\n            const canvas = document.createElement('canvas');\n            // Set width and height based on SVG node\n            const rect = svgNode.getBoundingClientRect();\n            canvas.width = rect.width * quality;\n            canvas.height = rect.height * quality;\n            // Draw background\n            const context = canvas.getContext('2d');\n            context.fillStyle = backgroundColor;;\n            context.fillRect(0, 0, rect.width * quality, rect.height * quality);\n            context.drawImage(image, 0, 0, rect.width * quality, rect.height * quality);\n            // Set some image metadata\n            let dt = canvas.toDataURL('image/png');\n            if (onLoad) {\n                onLoad(dt)\n            }\n            if (save) {\n                // Invoke saving function\n                saveAs(dt, imageName + '.png');\n            }\n\n        };\n\n        var url = 'data:image/svg+xml; charset=utf8, ' + encodeURIComponent(serializeString(svgNode));\n\n        onAlreadySerialized()\n\n        image.src = url// URL.createObjectURL(blob);\n        // This function invokes save window\n\n    }\n\n    // Calculate what size text will take\n    getTextWidth(text, {\n        fontSize = 14,\n        fontWeight = 400,\n        defaultFont = \"Helvetice\",\n        ctx\n    } = {}) {\n        ctx.font = `${fontWeight || ''} ${fontSize}px ${defaultFont} `\n        const measurement = ctx.measureText(text);\n        return measurement.width;\n    }\n\n    // Clear after moving off from the page\n    clear() {\n        const attrs = this.getChartState();\n        d3.select(window).on(`resize.${attrs.id}`, null);\n        attrs.svg && attrs.svg.selectAll(\"*\").remove();\n    }\n}",
      "start": 1759905612543,
      "end": 1759905612632,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1759905612632,
      "end": 1759905612632,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1759905612632,
      "end": 1759905612632,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1759905612632,
      "end": 1759905612632,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1759905612632,
      "end": 1759905612632,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1759905612632,
      "end": 1759905612632,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1759905612632,
      "end": 1759905612632,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1759905612632,
      "end": 1759905612632,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1759905612632,
      "end": 1759905612632,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1759905612632,
      "end": 1759905612632,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1759905612632,
      "end": 1759905612632,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1759905612632,
      "end": 1759905612632,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1759905612632,
      "end": 1759905612632,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1759905612632,
      "end": 1759905612632,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1759905612632,
      "end": 1759905612632,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1759905612632,
      "end": 1759905612632,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1759905612632,
      "end": 1759905612632,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1759905612632,
      "end": 1759905612632,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1759905612632,
      "end": 1759905612632,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1759905612632,
      "end": 1759905612633,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1759905612633,
      "end": 1759905612633,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1759905612633,
      "end": 1759905612637,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1759905612637,
      "end": 1759905612637,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1759905612637,
      "end": 1759905612637,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1759905612637,
      "end": 1759905612637,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1759905612637,
      "end": 1759905612637,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1759905612637,
      "end": 1759905612637,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1759905612637,
      "end": 1759905612638,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1759905612638,
      "end": 1759905612638,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1759905612638,
      "end": 1759905612638,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1759905612638,
      "end": 1759905612638,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1759905612638,
      "end": 1759905612638,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1759905612638,
      "end": 1759905612638,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1759905612638,
      "end": 1759905612638,
      "order": "normal"
    }
  ]
}
